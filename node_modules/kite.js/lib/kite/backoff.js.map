{"version":3,"sources":["../../src/kite/backoff.js"],"names":["options","backoff","totalReconnectAttempts","initalDelayMs","initialDelayMs","INITIAL_DELAY","multiplyFactor","MULTIPLY_FACTOR","maxDelayMs","MAX_DELAY","maxReconnectAttempts","MAX_RECONNECT_ATTEMPTS","clearBackoffTimeout","clearBackoffHandle","backoffHandle","clear","setBackoffTimeout","fn","timeout","Math","min","pow","emit","backOffFailed"],"mappings":";;;;;;kBAGe,UAASA,UAAU,EAAnB,EAAuB;AACpC,QAAM,EAAEC,UAAU,EAAZ,KAAmBD,OAAzB;AACA,MAAIE,yBAAyB,CAA7B;AACA,QAAMC,gBACJF,QAAQG,cAAR,IAA0B,IAA1B,GACIH,QAAQG,cADZ,GAEI,mBAAQC,aAHd;AAIA,QAAMC,iBACJL,QAAQK,cAAR,IAA0B,IAA1B,GACIL,QAAQK,cADZ,GAEI,mBAAQC,eAHd;AAIA,QAAMC,aACJP,QAAQO,UAAR,IAAsB,IAAtB,GAA6BP,QAAQO,UAArC,GAAkD,mBAAQC,SAD5D;AAEA,QAAMC,uBACJT,QAAQS,oBAAR,IAAgC,IAAhC,GACIT,QAAQS,oBADZ,GAEI,mBAAQC,sBAHd;;AAKA,OAAKC,mBAAL,GAA2B,MAAOV,yBAAyB,CAA3D;;AAEA,OAAKW,kBAAL,GAA0B,YAAW;AACnC,QAAI,KAAKC,aAAL,IAAsB,IAA1B,EAAgC;AAC9B,WAAKA,aAAL,CAAmBC,KAAnB;AACA,aAAQ,KAAKD,aAAL,GAAqB,IAA7B;AACD;AACF,GALD;;AAOA,SAAQ,KAAKE,iBAAL,GAAyBC,MAAM;AACrC,SAAKJ,kBAAL;AACA,QAAIX,yBAAyBQ,oBAA7B,EAAmD;AACjD,YAAMQ,UAAUC,KAAKC,GAAL,CACdjB,gBAAgBgB,KAAKE,GAAL,CAASf,cAAT,EAAyBJ,sBAAzB,CADF,EAEdM,UAFc,CAAhB;AAIA,WAAKM,aAAL,GAAqB,sBAAYG,EAAZ,EAAgBC,OAAhB,CAArB;AACA,aAAOhB,wBAAP;AACD,KAPD,MAOO;AACL,aAAO,KAAKoB,IAAL,CAAU,iBAAMC,aAAhB,CAAP;AACD;AACF,GAZD;AAaD,C;;AA3CD;;;;AACA","file":"backoff.js","sourcesContent":["import Timeout from './timeout'\nimport { Backoff, Event } from '../constants'\n\nexport default function(options = {}) {\n  const { backoff = {} } = options\n  let totalReconnectAttempts = 0\n  const initalDelayMs =\n    backoff.initialDelayMs != null\n      ? backoff.initialDelayMs\n      : Backoff.INITIAL_DELAY\n  const multiplyFactor =\n    backoff.multiplyFactor != null\n      ? backoff.multiplyFactor\n      : Backoff.MULTIPLY_FACTOR\n  const maxDelayMs =\n    backoff.maxDelayMs != null ? backoff.maxDelayMs : Backoff.MAX_DELAY\n  const maxReconnectAttempts =\n    backoff.maxReconnectAttempts != null\n      ? backoff.maxReconnectAttempts\n      : Backoff.MAX_RECONNECT_ATTEMPTS\n\n  this.clearBackoffTimeout = () => (totalReconnectAttempts = 0)\n\n  this.clearBackoffHandle = function() {\n    if (this.backoffHandle != null) {\n      this.backoffHandle.clear()\n      return (this.backoffHandle = null)\n    }\n  }\n\n  return (this.setBackoffTimeout = fn => {\n    this.clearBackoffHandle()\n    if (totalReconnectAttempts < maxReconnectAttempts) {\n      const timeout = Math.min(\n        initalDelayMs * Math.pow(multiplyFactor, totalReconnectAttempts),\n        maxDelayMs\n      )\n      this.backoffHandle = new Timeout(fn, timeout)\n      return totalReconnectAttempts++\n    } else {\n      return this.emit(Event.backOffFailed)\n    }\n  })\n}\n"]}