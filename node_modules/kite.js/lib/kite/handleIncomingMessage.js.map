{"version":3,"sources":["../../src/kite/handleIncomingMessage.js"],"names":["handleIncomingMessage","proto","message","emit","debug","req","warning","isKiteReq","handle","links","method","callbacks","authentication","auth","responseCallback","parseKiteReq","key","then","token","currentToken","err","getTraceReq","kite","getKiteInfo","catch","arguments","length","withArgs","o","error"],"mappings":";;;;;kBAKwBA,qB;;AALxB;;;;AACA;;;;AACA;;;;AACA;;;;AAEe,SAASA,qBAAT,CAA+BC,KAA/B,EAAsCC,OAAtC,EAA+C;AAC5D,OAAKC,IAAL,CAAU,iBAAMC,KAAhB,EAAwB,cAAaF,OAAQ,EAA7C;;AAEA,MAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC/BA,cAAU,4BAAMA,OAAN,CAAV;AACD;;AAED,QAAMG,MAAMH,OAAZ;;AAEA,MAAIG,OAAO,IAAX,EAAiB;AACf,SAAKF,IAAL,CAAU,iBAAMG,OAAhB,EAAyB,oBAAe,qBAAoBJ,OAAQ,GAA3C,CAAzB;AACA;AACD;;AAED,MAAI,CAACK,UAAUF,GAAV,CAAL,EAAqB;AACnB,SAAKF,IAAL,CAAU,iBAAMC,KAAhB,EAAuB,iCAAvB;AACA,WAAOH,MAAMO,MAAN,CAAaH,GAAb,CAAP;AACD;;AAED,QAAM,EAAEI,KAAF,EAASC,MAAT,EAAiBC,SAAjB,KAA+BN,GAArC;AACA,QAAM,EAAEO,gBAAgBC,IAAlB,EAAwBC,gBAAxB,KAA6CC,aAAaV,GAAb,CAAnD;;AAEA,OAAKF,IAAL,CAAU,iBAAMC,KAAhB,EAAuB,wBAAvB;;AAEA,SAAO,oBAAW,IAAX,EAAiBM,MAAjB,EAAyBG,IAAzB,EAA+B,KAAKG,GAApC,EACJC,IADI,CACCC,SAAS;AACb,SAAKf,IAAL,CAAU,iBAAMC,KAAhB,EAAuB,uBAAvB;;AAEA;AACA;AACA;AACA,SAAKe,YAAL,GAAoBD,KAApB;;AAEA,QAAI;AACFjB,YAAMO,MAAN,CAAaH,GAAb;AACD,KAFD,CAEE,OAAOe,GAAP,EAAY;AACZ,WAAKjB,IAAL,CAAU,iBAAMC,KAAhB,EAAuB,0BAAvB,EAAmDgB,GAAnD;AACAnB,YAAMO,MAAN,CACEa,YAAY;AACVC,cAAM,KAAKC,WAAL,EADI;AAEVH,WAFU;AAGVN,wBAHU;AAIVL,aAJU;AAKVE;AALU,OAAZ,CADF;AASD;;AAED,SAAKQ,YAAL,GAAoB,IAApB;AACA,WAAO,IAAP;AACD,GA1BI,EA2BJK,KA3BI,CA2BEJ,OAAO;AACZ,SAAKjB,IAAL,CAAU,iBAAMC,KAAhB,EAAuB,uBAAvB,EAAgDgB,GAAhD;;AAEAnB,UAAMO,MAAN,CACEa,YAAY;AACVC,YAAM,KAAKC,WAAL,EADI;AAEVH,SAFU;AAGVN,sBAHU;AAIVL,WAJU;AAKVE;AALU,KAAZ,CADF;AASD,GAvCI,CAAP;AAwCD;;AAED,MAAMJ,YAAYF,OAChBA,IAAIoB,SAAJ,CAAcC,MAAd,IACArB,IAAIoB,SAAJ,CAAc,CAAd,CADA,IAEApB,IAAIoB,SAAJ,CAAc,CAAd,EAAiBX,gBAFjB,IAGAT,IAAIoB,SAAJ,CAAc,CAAd,EAAiBE,QAJnB;;AAMA,MAAMN,cAAcO,KAAK;AACvB,SAAO;AACLlB,YAAQ,WADH;AAELe,eAAW,CACT;AACEE,gBAAU,CAAC,EAAEE,OAAOD,EAAER,GAAX,EAAD,CADZ;AAEEN,wBAAkBc,EAAEd,gBAFtB;AAGEQ,YAAMM,EAAEN;AAHV,KADS,CAFN;AASLb,WAAOmB,EAAEnB,KATJ;AAULE,eAAWiB,EAAEjB;AAVR,GAAP;AAYD,CAbD;;AAeA,MAAMI,eAAeV,OAAOA,IAAIoB,SAAJ,CAAc,CAAd,CAA5B","file":"handleIncomingMessage.js","sourcesContent":["import parse from 'try-json-parse'\nimport handleAuth from './auth'\nimport KiteError from './error'\nimport { Event } from '../constants'\n\nexport default function handleIncomingMessage(proto, message) {\n  this.emit(Event.debug, `Receiving: ${message}`)\n\n  if (typeof message === 'string') {\n    message = parse(message)\n  }\n\n  const req = message\n\n  if (req == null) {\n    this.emit(Event.warning, new KiteError(`Invalid payload! (${message})`))\n    return\n  }\n\n  if (!isKiteReq(req)) {\n    this.emit(Event.debug, 'Handling a normal dnode message')\n    return proto.handle(req)\n  }\n\n  const { links, method, callbacks } = req\n  const { authentication: auth, responseCallback } = parseKiteReq(req)\n\n  this.emit(Event.debug, 'Authenticating request')\n\n  return handleAuth(this, method, auth, this.key)\n    .then(token => {\n      this.emit(Event.debug, 'Authentication passed')\n\n      // set this as the current token for the duration of the synchronous\n      // method call.\n      // NOTE: this mechanism may be changed at some point in the future.\n      this.currentToken = token\n\n      try {\n        proto.handle(req)\n      } catch (err) {\n        this.emit(Event.debug, 'Error processing request', err)\n        proto.handle(\n          getTraceReq({\n            kite: this.getKiteInfo(),\n            err,\n            responseCallback,\n            links,\n            callbacks,\n          })\n        )\n      }\n\n      this.currentToken = null\n      return null\n    })\n    .catch(err => {\n      this.emit(Event.debug, 'Authentication failed', err)\n\n      proto.handle(\n        getTraceReq({\n          kite: this.getKiteInfo(),\n          err,\n          responseCallback,\n          links,\n          callbacks,\n        })\n      )\n    })\n}\n\nconst isKiteReq = req =>\n  req.arguments.length &&\n  req.arguments[0] &&\n  req.arguments[0].responseCallback &&\n  req.arguments[0].withArgs\n\nconst getTraceReq = o => {\n  return {\n    method: 'kite.echo',\n    arguments: [\n      {\n        withArgs: [{ error: o.err }],\n        responseCallback: o.responseCallback,\n        kite: o.kite,\n      },\n    ],\n    links: o.links,\n    callbacks: o.callbacks,\n  }\n}\n\nconst parseKiteReq = req => req.arguments[0]\n"]}