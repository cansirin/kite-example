{"version":3,"sources":["../../src/kite/messagescrubber.test.js"],"names":["describe","it","toThrow","kite","autoConnect","toNotThrow","called","callback","scrubber","params","result","wrapMessage","toInclude","KiteInfo","withArgs","toEqual","toBe","responseCallback","spyOn","error","makeProperError","toHaveBeenCalledWith","auth","foo","authentication","scrub","method","callbacks","toExist"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;AAEA;;;;;;AAEAA,SAAS,sBAAT,EAAiC,MAAM;AACrCC,KAAG,6BAAH,EAAkC,MAAM;AACtC,0BAAO,MAAM,+BAAb,EAAoCC,OAApC,CAA4C,yBAA5C;AACA,0BACE,MAAM,8BAAoB,EAAEC,MAAM,eAAS,EAAEC,aAAa,KAAf,EAAT,CAAR,EAApB,CADR,EAEEC,UAFF;AAGD,GALD;;AAOAL,WAAS,aAAT,EAAwB,MAAM;AAC5BC,OAAG,cAAH,EAAmB,MAAM;AACvB,YAAME,OAAO,eAAS,EAAEC,aAAa,KAAf,EAAT,CAAb;AACA,UAAIE,SAAS,KAAb;;AAEA,UAAIC,WAAW,MAAOD,SAAS,IAA/B;;AAEA,YAAME,WAAW,8BAAoB,EAAEL,IAAF,EAApB,CAAjB;AACA,YAAMM,SAAS,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAf;;AAEA,YAAMC,SAASF,SAASG,WAAT,CAAqBF,MAArB,EAA6BF,QAA7B,CAAf;;AAEA,4BAAOG,OAAOP,IAAd,EAAoBS,SAApB,CAA8B,oBAASC,QAAvC;AACA,4BAAOH,OAAOI,QAAd,EAAwBC,OAAxB,CAAgCN,MAAhC;;AAEA;AACA,4BAAOH,MAAP,EAAeU,IAAf,CAAoB,KAApB;AACAN,aAAOO,gBAAP,CAAwB,EAAxB;AACA,4BAAOX,MAAP,EAAeU,IAAf,CAAoB,IAApB;;AAEA,uBAAOE,KAAP,kBAAwB,iBAAxB;AACAR,aAAOO,gBAAP,CAAwB,EAAEE,OAAO,WAAT,EAAxB;AACA,4BAAO,gBAAUC,eAAjB,EAAkCC,oBAAlC,CAAuD,WAAvD;AACD,KAtBD;;AAwBApB,OAAG,gDAAH,EAAqD,MAAM;AACzD,YAAME,OAAO,eAAS,EAAEC,aAAa,KAAf,EAAsBkB,MAAM,EAAEC,KAAK,KAAP,EAA5B,EAAT,CAAb;AACA,YAAMf,WAAW,8BAAoB,EAAEL,IAAF,EAApB,CAAjB;;AAEA,YAAMO,SAASF,SAASG,WAAT,CAAqB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAArB,EAAgC,MAAM,CAAE,CAAxC,CAAf;;AAEA,4BAAOD,OAAOc,cAAd,EAA8BT,OAA9B,CAAsC,EAAEQ,KAAK,KAAP,EAAtC;AACD,KAPD;AAQD,GAjCD;;AAmCAvB,WAAS,OAAT,EAAkB,MAAM;AACtBC,OAAG,iDAAH,EAAsD,MAAM;AAC1D,YAAME,OAAO,eAAS,EAAEC,aAAa,KAAf,EAAT,CAAb;AACA,YAAMI,WAAW,8BAAoB,EAAEL,IAAF,EAApB,CAAjB;;AAEA,YAAMO,SAASF,SAASiB,KAAT,CAAe,MAAf,EAAuB,CAAC,CAAD,EAAI,CAAJ,CAAvB,EAA+B,MAAM,CAAE,CAAvC,CAAf;;AAEA,4BAAOf,OAAOgB,MAAd,EAAsBV,IAAtB,CAA2B,MAA3B;AACA,4BAAON,OAAOiB,SAAd,EAAyBC,OAAzB;AACD,KARD;AASD,GAVD;AAWD,CAtDD","file":"messagescrubber.test.js","sourcesContent":["import expect from 'expect'\nimport Kite from './'\nimport KiteError from './error'\nimport { Defaults } from '../constants'\n\nimport MessageScrubber from './messagescrubber'\n\ndescribe('kite/messagescrubber', () => {\n  it('expects a kite to be passed', () => {\n    expect(() => new MessageScrubber()).toThrow(/invalid kite: undefined/)\n    expect(\n      () => new MessageScrubber({ kite: new Kite({ autoConnect: false }) })\n    ).toNotThrow()\n  })\n\n  describe('wrapMessage', () => {\n    it('wraps params', () => {\n      const kite = new Kite({ autoConnect: false })\n      let called = false\n\n      let callback = () => (called = true)\n\n      const scrubber = new MessageScrubber({ kite })\n      const params = [1, 2, 3, 4]\n\n      const result = scrubber.wrapMessage(params, callback)\n\n      expect(result.kite).toInclude(Defaults.KiteInfo)\n      expect(result.withArgs).toEqual(params)\n\n      // test the returned responseCallback works correctly\n      expect(called).toBe(false)\n      result.responseCallback({})\n      expect(called).toBe(true)\n\n      expect.spyOn(KiteError, 'makeProperError')\n      result.responseCallback({ error: 'raw error' })\n      expect(KiteError.makeProperError).toHaveBeenCalledWith('raw error')\n    })\n\n    it('wraps kite auth option as authentication param', () => {\n      const kite = new Kite({ autoConnect: false, auth: { foo: 'bar' } })\n      const scrubber = new MessageScrubber({ kite })\n\n      const result = scrubber.wrapMessage([1, 2, 3], () => {})\n\n      expect(result.authentication).toEqual({ foo: 'bar' })\n    })\n  })\n\n  describe('scrub', () => {\n    it('scrubs parameters to make it ready for rpc call', () => {\n      const kite = new Kite({ autoConnect: false })\n      const scrubber = new MessageScrubber({ kite })\n\n      const result = scrubber.scrub('ping', [1, 2], () => {})\n\n      expect(result.method).toBe('ping')\n      expect(result.callbacks).toExist()\n    })\n  })\n})\n"]}