{"version":3,"sources":["../../src/kite/messagescrubber.js"],"names":["MessageScrubber","constructor","kite","Error","wrapMessage","params","callback","getKiteInfo","authentication","options","auth","withArgs","responseCallback","response","error","rawErr","result","err","makeProperError","scrub","method","defaultCallback","times","scrubbed","proto","scrubber","emit","debug"],"mappings":";;;;;;AAAA;;;;AACA;;;;AAEe,MAAMA,eAAN,CAAsB;;AAKnCC,cAAY,EAAEC,IAAF,KAAW,EAAvB,EAA2B;AACzB,QAAI,CAACA,IAAL,EAAW;AACT,YAAM,IAAIC,KAAJ,CAAW,iBAAgB,OAAOD,IAAK,EAAvC,CAAN;AACD;;AAED,SAAKA,IAAL,GAAYA,IAAZ;AACD;;AAEDE,cAAYC,MAAZ,EAAoBC,QAApB,EAA8B;AAC5B,WAAO;AACLJ,YAAM,KAAKA,IAAL,CAAUK,WAAV,EADD;AAELC,sBAAgB,KAAKN,IAAL,CAAUO,OAAV,CAAkBC,IAF7B;AAGLC,gBAAUN,MAHL;AAILO,uBAAiBC,QAAjB,EAA2B;AACzB,cAAM,EAAEC,OAAOC,MAAT,EAAiBC,MAAjB,KAA4BH,YAAY,EAA9C;AACA,cAAMI,MAAMF,UAAU,IAAV,GAAiB,gBAAUG,eAAV,CAA0BH,MAA1B,CAAjB,GAAqD,IAAjE;;AAEA,eAAOT,SAASW,GAAT,EAAcD,MAAd,CAAP;AACD;AATI,KAAP;AAWD;;AAEDG,QAAMC,MAAN,EAAcf,MAAd,EAAsBC,QAAtB,EAAgC;AAC9B,QAAI,CAACA,QAAD,IAAa,OAAOD,MAAP,KAAkB,UAAnC,EAA+C;AAC7CC,iBAAWD,MAAX;AACAA,eAAS,EAAT;AACD;;AAEDC,eAAWA,YAAYN,gBAAgBqB,eAAhB,CAAgC,KAAKnB,IAArC,CAAvB;;AAEA;AACA,QAAII,SAASgB,KAAT,IAAkB,IAAtB,EAA4B;AAC1BhB,eAASgB,KAAT,GAAiB,CAAjB;AACD;;AAED,QAAIC,WAAW,KAAKrB,IAAL,CAAUsB,KAAV,CAAgBC,QAAhB,CAAyBN,KAAzB,CAA+B,CAC5C,KAAKf,WAAL,CAAiBC,MAAjB,EAAyBC,QAAzB,CAD4C,CAA/B,CAAf;;AAIAiB,aAASH,MAAT,GAAkBA,MAAlB;;AAEA,WAAOG,QAAP;AACD;AA/CkC;kBAAhBvB,e;;AAAAA,e,CACZqB,e,GAAkBnB,QAAQ,MAAM;AACrCA,OAAKwB,IAAL,CAAU,iBAAMC,KAAhB,EAAuB,uCAAvB;AACD,C","file":"messagescrubber.js","sourcesContent":["import KiteError from './error'\nimport { Event } from '../constants'\n\nexport default class MessageScrubber {\n  static defaultCallback = kite => () => {\n    kite.emit(Event.debug, 'Unhandled call dropping to the floor.')\n  }\n\n  constructor({ kite } = {}) {\n    if (!kite) {\n      throw new Error(`invalid kite: ${typeof kite}`)\n    }\n\n    this.kite = kite\n  }\n\n  wrapMessage(params, callback) {\n    return {\n      kite: this.kite.getKiteInfo(),\n      authentication: this.kite.options.auth,\n      withArgs: params,\n      responseCallback(response) {\n        const { error: rawErr, result } = response || {}\n        const err = rawErr != null ? KiteError.makeProperError(rawErr) : null\n\n        return callback(err, result)\n      },\n    }\n  }\n\n  scrub(method, params, callback) {\n    if (!callback && typeof params === 'function') {\n      callback = params\n      params = []\n    }\n\n    callback = callback || MessageScrubber.defaultCallback(this.kite)\n\n    // by default, remove this callback after it is called once.\n    if (callback.times == null) {\n      callback.times = 1\n    }\n\n    let scrubbed = this.kite.proto.scrubber.scrub([\n      this.wrapMessage(params, callback),\n    ])\n\n    scrubbed.method = method\n\n    return scrubbed\n  }\n}\n"]}