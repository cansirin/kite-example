{"version":3,"sources":["../../src/kite/error.test.js"],"names":["describe","it","toExist","anError","Error","toBe","name","message","code","codeIs","codeIsnt","makeProperError","type"],"mappings":";;AAAA;;;;AACA;;;;;;AAEAA,SAAS,WAAT,EAAsB,MACpBC,GAAG,uCAAH,EAA4C,MAAM;AAChD,yCAAkBC,OAAlB;AACA,MAAIC,UAAU,oBAAc,UAAd,CAAd;;AAEA,wBAAOA,OAAP,EAAgBD,OAAhB;AACA,wBAAOC,mBAAmBC,KAA1B,EAAiCC,IAAjC,CAAsC,IAAtC;AACA,wBAAOF,QAAQG,IAAf,EAAqBD,IAArB,CAA0B,WAA1B;AACA,wBAAOF,QAAQI,OAAf,EAAwBF,IAAxB,CAA6B,UAA7B;AACD,CARD,CADF;;AAWAL,SAAS,kBAAT,EAA6B,MAC3BC,GAAG,+CAAH,EAAoD,MAAM;AACxD,MAAIE,UAAU,oBAAc,UAAd,CAAd;;AAEAA,UAAQK,IAAR,GAAe,GAAf;AACA,wBAAO,gBAAUC,MAAV,CAAiB,GAAjB,EAAsBN,OAAtB,CAAP,EAAuCE,IAAvC,CAA4C,IAA5C;AACA,wBAAO,gBAAUI,MAAV,CAAiB,GAAjB,EAAsBN,OAAtB,CAAP,EAAuCE,IAAvC,CAA4C,KAA5C;AACD,CAND,CADF;;AASAL,SAAS,oBAAT,EAA+B,MAC7BC,GAAG,+CAAH,EAAoD,MAAM;AACxD,MAAIE,UAAU,oBAAc,UAAd,CAAd;;AAEAA,UAAQK,IAAR,GAAe,GAAf;AACA,wBAAO,gBAAUE,QAAV,CAAmB,GAAnB,EAAwBP,OAAxB,CAAP,EAAyCE,IAAzC,CAA8C,IAA9C;AACA,wBAAO,gBAAUK,QAAV,CAAmB,GAAnB,EAAwBP,OAAxB,CAAP,EAAyCE,IAAzC,CAA8C,KAA9C;AACD,CAND,CADF;;AASAL,SAAS,2BAAT,EAAsC,MACpCC,GAAG,gCAAH,EAAqC,MAAM;AACzC,MAAIE,UAAU,gBAAUQ,eAAV,CAA0B;AACtCC,UAAM,aADgC;AAEtCJ,UAAM,GAFgC;AAGtCD,aAAS;AAH6B,GAA1B,CAAd;;AAMA,wBAAOJ,OAAP,EAAgBD,OAAhB;AACA,wBAAOC,mBAAmBC,KAA1B,EAAiCC,IAAjC,CAAsC,IAAtC;AACA,wBAAOF,QAAQG,IAAf,EAAqBD,IAArB,CAA0B,WAA1B;AACA,wBAAOF,QAAQS,IAAf,EAAqBP,IAArB,CAA0B,aAA1B;AACA,wBAAOF,QAAQK,IAAf,EAAqBH,IAArB,CAA0B,GAA1B;AACA,wBAAOF,QAAQI,OAAf,EAAwBF,IAAxB,CAA6B,UAA7B;AACD,CAbD,CADF","file":"error.test.js","sourcesContent":["import expect from 'expect'\nimport KiteError from './error'\n\ndescribe('KiteError', () =>\n  it('should provide a generic Error object', () => {\n    expect(KiteError).toExist()\n    let anError = new KiteError('an error')\n\n    expect(anError).toExist()\n    expect(anError instanceof Error).toBe(true)\n    expect(anError.name).toBe('KiteError')\n    expect(anError.message).toBe('an error')\n  }))\n\ndescribe('KiteError.codeIs', () =>\n  it('should support code checking on a given error', () => {\n    let anError = new KiteError('an error')\n\n    anError.code = 100\n    expect(KiteError.codeIs(100)(anError)).toBe(true)\n    expect(KiteError.codeIs(101)(anError)).toBe(false)\n  }))\n\ndescribe('KiteError.codeIsnt', () =>\n  it('should support code checking on a given error', () => {\n    let anError = new KiteError('an error')\n\n    anError.code = 100\n    expect(KiteError.codeIsnt(101)(anError)).toBe(true)\n    expect(KiteError.codeIsnt(100)(anError)).toBe(false)\n  }))\n\ndescribe('KiteError.makeProperError', () =>\n  it('should generate a proper error', () => {\n    let anError = KiteError.makeProperError({\n      type: 'AnErrorType',\n      code: 200,\n      message: 'an error',\n    })\n\n    expect(anError).toExist()\n    expect(anError instanceof Error).toBe(true)\n    expect(anError.name).toBe('KiteError')\n    expect(anError.type).toBe('AnErrorType')\n    expect(anError.code).toBe(200)\n    expect(anError.message).toBe('an error')\n  }))\n"]}