{"version":3,"sources":["../../src/kite/index.js"],"names":["Kite","tell","method","params","resolve","reject","err","result","ready","callback","nodeify","expireToken","promisify","prototype"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,MAAMA,IAAN,wBAA4B;AAC1BC,OAAKC,MAAL,EAAa,GAAGC,MAAhB,EAAwB;AACtB,WAAO,uBAAY,CAACC,OAAD,EAAUC,MAAV,KACjB,MAAMJ,IAAN,CAAWC,MAAX,EAAmB,GAAGC,MAAtB,EAA8B,CAACG,GAAD,EAAMC,MAAN,KAAiB;AAC7C,UAAID,GAAJ,EAAS;AACP,eAAOD,OAAOC,GAAP,CAAP;AACD;AACD,aAAOF,QAAQG,MAAR,CAAP;AACD,KALD,CADK,CAAP;AAQD;;AAEDC,QAAMC,QAAN,EAAgB;AACd,WAAO,uBAAYL,WAAW,MAAMI,KAAN,CAAYJ,OAAZ,CAAvB,EAA6CM,OAA7C,CAAqDD,QAArD,CAAP;AACD;AAdyB;;AAiB5BT,KAAKW,WAAL,GAAmB,mBAAQC,SAAR,CAAkB,eAASC,SAAT,CAAmBF,WAArC,CAAnB;;kBAEeX,I","file":"index.js","sourcesContent":["import BaseKite from './base'\nimport Promise from 'bluebird'\n\nclass Kite extends BaseKite {\n  tell(method, ...params) {\n    return new Promise((resolve, reject) =>\n      super.tell(method, ...params, (err, result) => {\n        if (err) {\n          return reject(err)\n        }\n        return resolve(result)\n      })\n    )\n  }\n\n  ready(callback) {\n    return new Promise(resolve => super.ready(resolve)).nodeify(callback)\n  }\n}\n\nKite.expireToken = Promise.promisify(BaseKite.prototype.expireToken)\n\nexport default Kite\n"]}