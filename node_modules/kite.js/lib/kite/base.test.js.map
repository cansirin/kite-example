{"version":3,"sources":["../../src/kite/base.test.js"],"names":["logLevel","makeKite","options","Object","assign","url","autoConnect","autoReconnect","describe","it","DebugLevel","toExist","transport","SockJS","WebSocket","toThrow","toNotThrow","kite","prefix","toBe","readyState","NOTREADY","auth","key","getToken","token","setToken","kiteInfo","getKiteInfo","id","toEqual","KiteInfo","done","api","methods","foo","toNotExist","setApi","bar","callback","kiteServer","name","squareApi","square","x","cubeApi","cube","listen","server","once","connection","tell","then","res","finally","disconnect","close","connect"],"mappings":"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","file":"base.test.js","sourcesContent":["import expect from 'expect'\nimport BaseKite from './base'\nimport Kite from '.'\nimport KiteApi from '../kiteapi'\nimport KiteServer from '../server'\nimport { Defaults, State, AuthType } from '../constants'\n\nconst logLevel = 0\n\nconst makeKite = (options = {}) => {\n  options = Object.assign(\n    {},\n    {\n      url: 'ws://localhost',\n      autoConnect: false,\n      autoReconnect: false,\n      logLevel: 0,\n    },\n    options\n  )\n\n  return new BaseKite(options)\n}\n\ndescribe('BaseKite', () => {\n  it('should expose DebugLevels', () => {\n    expect(BaseKite.DebugLevel).toExist()\n  })\n\n  it('should expose SockJS and WebSocket as transport class', () => {\n    expect(BaseKite.transport.SockJS).toExist()\n    expect(BaseKite.transport.WebSocket).toExist()\n  })\n\n  describe('constructor', () => {\n    it('requires a valid url', () => {\n      expect(() => new BaseKite({})).toThrow(/\"url\" must be a string/)\n      expect(() => new BaseKite({ url: 'foo' })).toThrow(/invalid url/)\n      expect(\n        () => new BaseKite({ autoConnect: false, url: 'http://localhost' })\n      ).toNotThrow()\n    })\n\n    it('accepts a prefix', () => {\n      const kite = makeKite({ prefix: '/foo' })\n      expect(kite.options.url).toBe('ws://localhost/foo')\n    })\n\n    it('starts with NOTREADY readyState', () => {\n      const kite = makeKite()\n      expect(kite.readyState).toBe(State.NOTREADY)\n    })\n  })\n\n  describe('getToken', () => {\n    it('returns auth token', () => {\n      const kite = makeKite({\n        auth: {\n          key: 'foo',\n        },\n      })\n\n      expect(kite.getToken()).toBe('foo')\n    })\n  })\n\n  describe('setToken', () => {\n    it('fails if kite is initialized with default auth type token', () => {\n      const kite = makeKite({\n        auth: AuthType.token /* === 'token' */,\n      })\n\n      expect(() => kite.setToken('foo')).toThrow(/Invalid auth type/)\n    })\n\n    it('fails if kite is initialized without any auth options', () => {\n      const kite = makeKite()\n\n      expect(() => kite.setToken('foo')).toThrow(/Auth option must be set/)\n    })\n\n    it('works well if kite is initialized with correct auth options', () => {\n      const kite = makeKite({\n        auth: {\n          key: 'foo',\n        },\n      })\n\n      kite.setToken('bar')\n\n      expect(kite.getToken()).toBe('bar')\n    })\n  })\n\n  describe('getKiteInfo', () =>\n    it('should return default kite info if no option provided', () => {\n      let kite = new BaseKite({\n        url: 'ws://localhost',\n        autoConnect: false,\n      })\n      expect(kite).toExist()\n\n      let kiteInfo = kite.getKiteInfo()\n      delete kiteInfo.id // new id generated each time\n      expect(kiteInfo).toEqual(Defaults.KiteInfo)\n    }))\n\n  describe('setApi', () => {\n    it('should allow defining api after init', done => {\n      let kite = new BaseKite({\n        url: 'ws://localhost',\n        autoConnect: false,\n      })\n      expect(kite).toExist()\n      expect(kite.api.methods.foo).toNotExist()\n      expect(kite.api.methods['kite.ping']).toExist()\n\n      kite.setApi(\n        new KiteApi({\n          auth: false,\n          methods: {\n            foo: function(bar, callback) {\n              callback(null, bar)\n            },\n          },\n        })\n      )\n\n      expect(kite.api.methods.foo).toExist()\n      expect(kite.api.methods['kite.ping']).toExist()\n\n      done()\n    })\n\n    it('should work with the new api', done => {\n      const kiteServer = new KiteServer({\n        name: 'kite-server',\n        auth: false,\n        logLevel,\n      })\n\n      let squareApi = new KiteApi({\n        auth: false,\n        methods: {\n          square: function(x, callback) {\n            callback(null, x * x)\n          },\n        },\n      })\n\n      let cubeApi = new KiteApi({\n        auth: false,\n        methods: {\n          cube: function(x, callback) {\n            callback(null, x * x * x)\n          },\n        },\n      })\n\n      const kite = new Kite({\n        url: 'http://0.0.0.0:7780',\n        autoConnect: false,\n        logLevel,\n      })\n\n      expect(kite).toExist()\n\n      expect(kite.api.methods.square).toNotExist()\n      expect(kite.api.methods.cube).toNotExist()\n\n      kite.setApi(squareApi)\n\n      expect(kite.api.methods.square).toExist()\n      expect(kite.api.methods.cube).toNotExist()\n\n      kiteServer.listen(7780)\n\n      kiteServer.server.once('connection', connection => {\n        connection.kite\n          .tell('square', 5)\n          .then(res => expect(res).toBe(25))\n          .finally(() => {\n            kite.setApi(cubeApi)\n            expect(kite.api.methods.square).toNotExist()\n            expect(kite.api.methods.cube).toExist()\n\n            connection.kite\n              .tell('cube', 5)\n              .then(res => expect(res).toBe(125))\n              .finally(() => {\n                kite.disconnect()\n                kiteServer.close()\n                done()\n              })\n          })\n      })\n\n      kite.connect()\n    })\n  })\n})\n"]}