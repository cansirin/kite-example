{"version":3,"sources":["../../src/server/index.js"],"names":["KiteServer","constructor","options","hostname","logger","name","level","logLevel","id","server","setApi","auth","methods","api","currentToken","Error","info","close","listen","port","getToken","getServerClass","serverClass","transportClass","transport","WebSocket","getPrefix","prefix","length","charAt","Server","on","bound","getAddress","handleRequest","ws","response","arguments","args","method","callbacks","links","err","result","Array","from","message","error","messageStr","JSON","stringify","debug","send","onConnection","proto","lazyBound","getId","SockJS","kite","url","autoConnect","autoReconnect","onOpen","rawData","hasMethod","handleMessage","call","version","KiteInfo","prototype"],"mappings":"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","file":"index.js","sourcesContent":["import Emitter from '../kite/emitter'\nimport dnodeProtocol from 'dnode-protocol'\n\nimport parse from 'try-json-parse'\n\nimport { hostname } from 'os'\n\nimport Kite from '../kite'\n\nimport handleIncomingMessage from '../kite/handleIncomingMessage'\nimport { v4 as createId } from 'uuid'\nimport { Defaults } from '../constants'\n\nimport WebSocketServer from './websocket'\nimport SockJSServer from './sockjs'\n\nimport KiteApi from '../kiteapi'\nimport KiteLogger from '../kitelogger'\n\nclass KiteServer extends Emitter {\n  static version = Defaults.KiteInfo.version\n  static transport = {\n    WebSocket: WebSocketServer,\n    SockJS: SockJSServer,\n  }\n\n  constructor(options = {}) {\n    super()\n\n    this.options = options\n\n    if (this.options.hostname == null) {\n      this.options.hostname = hostname()\n    }\n\n    this.logger = new KiteLogger({\n      name: options.name || 'kite',\n      level: options.logLevel,\n    })\n\n    this.id = createId()\n    this.server = null\n\n    this.setApi(\n      new KiteApi({\n        auth: this.options.auth,\n        methods: this.options.api,\n      })\n    )\n\n    this.currentToken = null\n  }\n\n  setApi(api) {\n    if (api instanceof KiteApi) {\n      this.api = api\n    } else {\n      throw new Error('A valid KiteApi instance is required!')\n    }\n\n    if (this.server != null) {\n      this.logger.info(`API change, restarting running server...`)\n      this.close()\n      this.listen(this.port)\n    }\n  }\n\n  getToken() {\n    return this.currentToken\n  }\n\n  getServerClass() {\n    // serverClass is used for backward compatibility\n    const { serverClass, transportClass } = this.options\n    return serverClass || transportClass || KiteServer.transport.WebSocket\n  }\n\n  getPrefix() {\n    let { prefix } = this.options\n    if (prefix == null) {\n      prefix = ''\n    }\n    if (prefix.length && prefix.charAt(0) !== '/') {\n      prefix = `/${prefix}`\n    }\n    return prefix\n  }\n\n  listen(port) {\n    if (this.server != null) {\n      throw new Error('Already listening!')\n    }\n    this.port = port\n    const prefix = this.getPrefix()\n    const { name, logLevel } = this.options\n    const Server = this.getServerClass()\n    this.server = new Server({ port, prefix, name, logLevel })\n    this.server.on('connection', this.bound('onConnection'))\n    this.logger.info(`Listening: ${this.server.getAddress()}`)\n  }\n\n  close() {\n    if (this.server != null) {\n      this.server.close()\n    }\n    this.server = null\n  }\n\n  handleRequest(ws, response) {\n    const { arguments: args, method, callbacks, links } = response\n    const [err, result] = Array.from(args)\n    const message = { error: err, result }\n    const messageStr = JSON.stringify({\n      method,\n      arguments: [message],\n      links,\n      callbacks,\n    })\n    this.logger.debug(`Sending: ${messageStr}`)\n    return ws.send(messageStr)\n  }\n\n  onConnection(ws) {\n    const proto = dnodeProtocol(this.api.methods)\n    proto.on('request', this.lazyBound('handleRequest', ws))\n\n    const id = ws.getId()\n\n    let transportClass = Kite.transport.WebSocket\n    if (this.getServerClass() === KiteServer.transport.SockJS) {\n      transportClass = Kite.transport.SockJS\n    }\n\n    ws.kite = new Kite({\n      url: id,\n      name: `${this.options.name}-remote`,\n      logLevel: this.options.logLevel,\n      autoConnect: false,\n      autoReconnect: false,\n      transportClass,\n    })\n\n    ws.kite.ws = ws\n    ws.kite.onOpen()\n\n    ws.on('message', rawData => {\n      const message = parse(rawData)\n      if (this.api.hasMethod(message.method)) {\n        this.handleMessage(proto, message, ws.kite)\n      } else {\n        if (message.arguments.length === 2) {\n          let [error, result] = message.arguments\n          message.arguments = [{ error, result }]\n        }\n        this.handleMessage.call(ws.kite, ws.kite.proto, message)\n      }\n    })\n\n    ws.on('close', () => {\n      this.logger.info(`Client has disconnected: ${id}`)\n    })\n\n    this.logger.info(`New connection from: ${id}`)\n  }\n}\n\nKiteServer.prototype.handleMessage = handleIncomingMessage\n\nexport default KiteServer\n"]}