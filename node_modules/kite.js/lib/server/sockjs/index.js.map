{"version":3,"sources":["../../../src/server/sockjs/index.js"],"names":["Server","constructor","options","hostname","port","Error","logger","name","level","logLevel","sockjsOptions","log","message","sockjs","createServer","server","on","connection","debug","emit","installHandlers","prefix","listen","getAddress","close","scheme","secureScheme"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEe,MAAMA,MAAN,2BAA6B;;AAI1CC,cAAYC,UAAU,EAAtB,EAA0B;AACxB;;AAEA,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKA,OAAL,CAAaC,QAAb,GAAwB,KAAKD,OAAL,CAAaC,QAAb,IAAyB,SAAjD;AACA,QAAI,CAAC,KAAKD,OAAL,CAAaE,IAAlB,EAAwB,MAAM,IAAIC,KAAJ,CAAU,mBAAV,CAAN;;AAExB,SAAKC,MAAL,GAAc,yBAAe;AAC3BC,YAAML,QAAQK,IADa;AAE3BC,aAAON,QAAQO;AAFY,KAAf,CAAd;;AAKA,UAAMC,gBAAgB;AACpBC,WAAK,CAACH,KAAD,EAAQI,OAAR,KAAoB;AACvB,YAAI,KAAKN,MAAL,CAAYE,KAAZ,CAAJ,EAAwB;AACtB,eAAKF,MAAL,CAAYE,KAAZ,EAAmBI,OAAnB;AACD;AACF;AALmB,KAAtB;;AAQA,SAAKC,MAAL,GAAc,iBAAOC,YAAP,CAAoBJ,aAApB,CAAd;AACA,SAAKK,MAAL,GAAc,eAAKD,YAAL,EAAd;;AAEA,SAAKD,MAAL,CAAYG,EAAZ,CAAe,YAAf,EAA6BC,cAAc;AACzC,WAAKX,MAAL,CAAYY,KAAZ,CAAkB,kBAAlB,EAAsCD,UAAtC;AACA,WAAKE,IAAL,CAAU,YAAV,EAAwB,sBAAYF,UAAZ,CAAxB;AACD,KAHD;;AAKA,SAAKJ,MAAL,CAAYO,eAAZ,CAA4B,KAAKL,MAAjC,EAAyC,EAAEM,QAAQnB,QAAQmB,MAAR,IAAkB,EAA5B,EAAzC;;AAEA,SAAKf,MAAL,CAAYY,KAAZ,CAAkB,8BAAlB,EAAkDhB,OAAlD;AACA,SAAKa,MAAL,CAAYO,MAAZ,CAAmBpB,QAAQE,IAA3B,EAAiCF,QAAQC,QAAzC;AACD;;AAEDoB,eAAa;AACX,WAAQ,GAAE,KAAKrB,OAAL,CAAaC,QAAS,IAAG,KAAKD,OAAL,CAAaE,IAAK,EAArD;AACD;;AAEDoB,UAAQ;AACN,QAAI,KAAKT,MAAL,IAAe,IAAnB,EAAyB;AACvB,aAAO,KAAKA,MAAL,CAAYS,KAAZ,EAAP;AACD;AACF;AA9CyC;kBAAvBxB,M;AAAAA,M,CACZyB,M,GAAS,M;AADGzB,M,CAEZ0B,Y,GAAe,O","file":"index.js","sourcesContent":["import SockJS from 'sockjs'\nimport http from 'http'\nimport Emitter from '../../kite/emitter'\nimport Session from './session'\n\nimport KiteLogger from '../../kitelogger'\n\nexport default class Server extends Emitter {\n  static scheme = 'http'\n  static secureScheme = 'https'\n\n  constructor(options = {}) {\n    super()\n\n    this.options = options\n    this.options.hostname = this.options.hostname || '0.0.0.0'\n    if (!this.options.port) throw new Error('port is required!')\n\n    this.logger = new KiteLogger({\n      name: options.name,\n      level: options.logLevel,\n    })\n\n    const sockjsOptions = {\n      log: (level, message) => {\n        if (this.logger[level]) {\n          this.logger[level](message)\n        }\n      },\n    }\n\n    this.sockjs = SockJS.createServer(sockjsOptions)\n    this.server = http.createServer()\n\n    this.sockjs.on('connection', connection => {\n      this.logger.debug('a new connection', connection)\n      this.emit('connection', new Session(connection))\n    })\n\n    this.sockjs.installHandlers(this.server, { prefix: options.prefix || '' })\n\n    this.logger.debug('starting to listen on server', options)\n    this.server.listen(options.port, options.hostname)\n  }\n\n  getAddress() {\n    return `${this.options.hostname}:${this.options.port}`\n  }\n\n  close() {\n    if (this.server != null) {\n      return this.server.close()\n    }\n  }\n}\n"]}