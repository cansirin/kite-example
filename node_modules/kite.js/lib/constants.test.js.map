{"version":3,"sources":["../src/constants.test.js"],"names":["constants","describe","it","Event","toExist","Object","keys","toEqual","KnownEvents","requiredEvents","forEach","event","includes","toBe","AuthType","token","TimerHandles","WhiteList","State","NOTREADY","READY","CLOSED","CONNECTING","DebugLevel","CRITICAL","DEBUG","Version","version"],"mappings":";;AAAA;;;;AACA;;;;AACA;;IAAYA,S;;;;;;AAEZC,SAAS,WAAT,EAAsB,MACpBC,GAAG,kCAAH,EAAuC,MAAM;AAC3C,wBAAOF,UAAUG,KAAjB,EAAwBC,OAAxB;AACA,wBAAOC,OAAOC,IAAP,CAAYN,UAAUG,KAAtB,CAAP,EAAqCI,OAArC,CAA6CP,UAAUQ,WAAvD;AACA,QAAMC,iBAAiB,CACrB,eADqB,EAErB,cAFqB,EAGrB,UAHqB,EAIrB,UAJqB,EAKrB,SALqB,EAMrB,SANqB,EAOrB,UAPqB,EAQrB,QARqB,EASrB,OATqB,EAUrB,MAVqB,EAWrB,MAXqB,EAYrB,MAZqB,EAarB,OAbqB,EAcrB,OAdqB,CAAvB;;AAiBAA,iBAAeC,OAAf,CAAuBC,SACrB,sBAAOX,UAAUQ,WAAV,CAAsBI,QAAtB,CAA+BD,KAA/B,CAAP,EAA8CE,IAA9C,CAAmD,IAAnD,CADF;;AAIA,wBAAOb,UAAUc,QAAjB,EAA2BV,OAA3B;AACA,wBAAOJ,UAAUc,QAAV,CAAmBC,KAA1B,EAAiCX,OAAjC;;AAEA,wBAAOJ,UAAUgB,YAAjB,EAA+BZ,OAA/B;AACA,wBAAOJ,UAAUgB,YAAV,CAAuBJ,QAAvB,CAAgC,iBAAhC,CAAP,EAA2DC,IAA3D,CAAgE,IAAhE;;AAEA,wBAAOb,UAAUiB,SAAjB,EAA4Bb,OAA5B;AACA,wBAAOJ,UAAUiB,SAAV,CAAoBL,QAApB,CAA6B,WAA7B,CAAP,EAAkDC,IAAlD,CAAuD,IAAvD;;AAEA,wBAAOb,UAAUkB,KAAV,CAAgBC,QAAvB,EAAiCN,IAAjC,CAAsC,CAAtC;AACA,wBAAOb,UAAUkB,KAAV,CAAgBE,KAAvB,EAA8BP,IAA9B,CAAmC,CAAnC;AACA,wBAAOb,UAAUkB,KAAV,CAAgBG,MAAvB,EAA+BR,IAA/B,CAAoC,CAApC;AACA,wBAAOb,UAAUkB,KAAV,CAAgBI,UAAvB,EAAmCT,IAAnC,CAAwC,CAAxC;;AAEA,wBAAOb,UAAUuB,UAAV,CAAqBC,QAA5B,EAAsCX,IAAtC,CAA2C,CAA3C;AACA,wBAAOb,UAAUuB,UAAV,CAAqBE,KAA5B,EAAmCZ,IAAnC,CAAwC,CAAxC;;AAEA,wBAAOb,UAAU0B,OAAjB,EAA0Bb,IAA1B,CAA+B,kBAAIc,OAAnC;AACD,CA1CD,CADF","file":"constants.test.js","sourcesContent":["import expect from 'expect'\nimport pkg from '../package.json'\nimport * as constants from './constants'\n\ndescribe('constants', () =>\n  it('should expose required constants', () => {\n    expect(constants.Event).toExist()\n    expect(Object.keys(constants.Event)).toEqual(constants.KnownEvents)\n    const requiredEvents = [\n      'backOffFailed',\n      'tokenExpired',\n      'tokenSet',\n      'register',\n      'request',\n      'message',\n      'critical',\n      'notice',\n      'error',\n      'warn',\n      'info',\n      'open',\n      'close',\n      'debug',\n    ]\n\n    requiredEvents.forEach(event =>\n      expect(constants.KnownEvents.includes(event)).toBe(true)\n    )\n\n    expect(constants.AuthType).toExist()\n    expect(constants.AuthType.token).toExist()\n\n    expect(constants.TimerHandles).toExist()\n    expect(constants.TimerHandles.includes('heartbeatHandle')).toBe(true)\n\n    expect(constants.WhiteList).toExist()\n    expect(constants.WhiteList.includes('kite.ping')).toBe(true)\n\n    expect(constants.State.NOTREADY).toBe(0)\n    expect(constants.State.READY).toBe(1)\n    expect(constants.State.CLOSED).toBe(3)\n    expect(constants.State.CONNECTING).toBe(5)\n\n    expect(constants.DebugLevel.CRITICAL).toBe(0)\n    expect(constants.DebugLevel.DEBUG).toBe(5)\n\n    expect(constants.Version).toBe(pkg.version)\n  }))\n"]}